generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum UserRole {
  MEMBER
  INTERN
  TEAM_LEAD
  ADMIN
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  ARCHIVED
}

enum OnboardingStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  APPROVED
}

enum AccessRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AccessRequestType {
  ROLE_CHANGE
  TEAM_JOIN
  RESOURCE_ACCESS
  PERMISSION_REQUEST
}

// Core user profile with RBAC
model User {
  id               String       @id @default(cuid())
  email            String       @unique
  name             String?
  password         String?
  image            String?
  emailVerified    DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  resetToken       String?      @unique
  resetTokenExpiry DateTime?
  
  // RBAC fields
  rolePrimary      UserRole     @default(MEMBER)
  status           UserStatus   @default(ACTIVE)
  startDate        DateTime?
  endDate          DateTime?
  timezone         String?      @default("UTC")
  
  // Profile fields
  dateOfBirth      DateTime?
  location         String?
  website          String?
  bio              String?
  phone            String?
  github           String?
  discord          String?
  
  // Preferences
  theme            String?      @default("light")
  notifications    Boolean      @default(true)
  newsletter       Boolean      @default(false)
  
  // Relations
  Account          Account[]
  Experience       Experience[]
  Session          Session[]
  UserRoles        UserRole_Assignment[]
  TeamMemberships  TeamMember[]
  Onboarding       Onboarding?
  AccessRequests   AccessRequest[]
  ApprovedRequests AccessRequest[] @relation("ApprovedBy")
  AuditLogs        AuditLog[]
  TeamsLed         Team[]       @relation("TeamLead")

  @@index([email])
  @@index([rolePrimary, status])
}

// Role definitions
model Role {
  id          String @id @default(cuid())
  code        String @unique // member, intern, team_lead, admin
  name        String
  description String?
  permissions Json?  // Store permissions as JSON
  createdAt   DateTime @default(now())
  
  UserRoles   UserRole_Assignment[]
}

// User role assignments (allows multiple roles per user)
model UserRole_Assignment {
  id         String   @id @default(cuid())
  userId     String
  roleId     String
  assignedBy String?
  assignedAt DateTime @default(now())
  expiresAt  DateTime?
  
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

// Teams
model Team {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  leadId      String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  Lead        User?        @relation("TeamLead", fields: [leadId], references: [id])
  Members     TeamMember[]
  
  @@index([isActive])
}

// Team memberships
model TeamMember {
  id       String    @id @default(cuid())
  teamId   String
  userId   String
  joinedAt DateTime  @default(now())
  leftAt   DateTime?
  
  Team     Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  User     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([teamId, userId])
  @@index([teamId])
  @@index([userId])
}

// Onboarding tracking
model Onboarding {
  id        String           @id @default(cuid())
  userId    String           @unique
  status    OnboardingStatus @default(NOT_STARTED)
  step      Int              @default(0)
  metadata  Json?            // Store step-specific data
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  
  User      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([status])
}

// Access requests
model AccessRequest {
  id          String              @id @default(cuid())
  userId      String
  type        AccessRequestType
  target      String              // What they're requesting (role name, team id, etc.)
  reason      String?
  status      AccessRequestStatus @default(PENDING)
  decidedBy   String?
  decidedAt   DateTime?
  metadata    Json?               // Additional request data
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  
  User        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  DecidedBy   User?               @relation("ApprovedBy", fields: [decidedBy], references: [id])
  
  @@index([status])
  @@index([userId])
  @@index([type])
}

// Audit logging
model AuditLog {
  id           String   @id @default(cuid())
  actorId      String
  action       String   // CREATE, UPDATE, DELETE, ASSIGN_ROLE, etc.
  entityType   String   // USER, TEAM, ROLE, etc.
  entityId     String
  diff         Json?    // Before/after changes
  metadata     Json?    // Additional context
  createdAt    DateTime @default(now())
  
  Actor        User     @relation(fields: [actorId], references: [id], onDelete: Cascade)
  
  @@index([actorId])
  @@index([entityType, entityId])
  @@index([action])
  @@index([createdAt])
}

// Legacy models (keeping for backward compatibility during migration)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Experience {
  id         String   @id @default(cuid())
  userId     String?
  name       String
  email      String?
  title      String?
  content    String
  rating     Int?
  isPublic   Boolean  @default(true)
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  User       User?    @relation(fields: [userId], references: [id])

  @@index([isPublic, isApproved, createdAt])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
